import { ActorRef } from 'xstate';
import { XStateDevInterface } from 'xstate/lib/devTools';
import { ReceiverEvent, Replacer } from './types';
export declare type InspectMachineEvent = ReceiverEvent | {
    type: 'unload';
} | {
    type: 'disconnect';
} | {
    type: 'xstate.event';
    event: string;
    service: string;
} | {
    type: 'xstate.inspecting';
    client: Pick<ActorRef<any>, 'send'>;
};
export declare function createInspectMachine(devTools?: XStateDevInterface, options?: {
    serialize?: Replacer | undefined;
}): import("xstate").StateMachine<{
    client?: Pick<ActorRef<any, any>, "send"> | undefined;
}, any, InspectMachineEvent, any, import("xstate").BaseActionObject, import("xstate").ServiceMap, import("xstate").TypegenDisabled & {
    missingImplementations: {
        actions: never;
        delays: never;
        guards: never;
        services: never;
    };
} & {
    eventsCausingActions: Record<string, string>;
    eventsCausingDelays: Record<string, string>;
    eventsCausingGuards: Record<string, string>;
    eventsCausingServices: Record<string, string>;
} & {
    indexedActions: import("xstate").IndexByType<import("xstate").BaseActionObject>;
    indexedEvents: Record<string, InspectMachineEvent> & {
        __XSTATE_ALLOW_ANY_INVOKE_DATA_HACK__: {
            data: any;
        };
    };
    invokeSrcNameMap: Record<string, "__XSTATE_ALLOW_ANY_INVOKE_DATA_HACK__">;
}>;
//# sourceMappingURL=inspectMachine.d.ts.map